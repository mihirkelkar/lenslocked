package models

import (
	"errors"

	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	"github.com/mihirkelkar/lenslocked.com/hash"
	"github.com/mihirkelkar/lenslocked.com/rand"
	"golang.org/x/crypto/bcrypt"
)

var (
	ErrNotFound        = errors.New("The user you were looking for was not found")
	ErrInvalidID       = errors.New("The ID you provided is Invalid")
	ErrInvalidPassword = errors.New("This username and password combination is not valid")
)

var userPwPepper = "N0thingF0rTheSwimB@ck"

var secretkey = "ThisIsNotTheSecretKey"

// UserDB is used to interact with the users database.
//
// For pretty much all single user queries:
// If the user is found, we will return a nil error
// If the user is not found, we will return ErrNotFound
// If there is another error, we will return an error with
// more information about what went wrong. This may not be
// an error generated by the models package.
//
// For single user queries, any error but ErrNotFound should
// probably result in a 500 error until we make "public"
// facing errors.
// Our database interaction struct usergorm will implement this
// interface entirely.
type UserDB interface {
	//Methods for querying single user.
	ByID(id int) (*User, error)
	ByEmail(email string) (*User, error)
	ByRemember(token string) (*User, error)
	ByRememberHash(hash string) (*User, error)
	//Methods for Alterting Users
	Create(user *User) error
	Update(user *User) error
	Delete(id uint) error

	//Close connections to the user database
	Close()

	//Automigrate the database
	AutoMigrate() error
	DestructiveReset() error
}

//UserService : Is used to interact with our models package.
// This interface can be implemented by any struct that implements
// the Authenticate function and implements the UserDB interface
type UserService interface {
	Authenticate(email string, password string) (*User, error)
	UserDB
}

type User struct {
	gorm.Model
	Name         string
	Email        string `gorm:"not null;unique_index"`
	Password     string `gorm:"-"` //The "-" after password indicates that this will not be added to the database
	PasswordHash string
	Age          int
	Remember     string `gorm:"-"`
	RememberHash string
}

//userGorm : implements the UserDB interface
// reciever functions defined in this interface
// help us access the database layer
type userGorm struct {
	db *gorm.DB
}

//userValidator : implements the UserDB interface itself and also
//has a UserDB static field
//basically, adds validation code on top of every UserDB function
//it implements and then calls the functon of the same name from its
//embedded UserDB field from within that function.
//
type userValidator struct {
	UserDB
	hmac hash.HMAC
}

//userService :  implements the UserService interface. It has to implement
// the Authenticate functionality and all the functions of the UserDB interface.
// We define an Authenticate at the end and we embed a UserDB static type that
//takes care of the UserDB interface implementation.
// The NewUserService implementation instantiates a new userService.
// The UserDB implementation here will likely be a userValidator implementing
// the UserDB interface
//All methods of the UserDB interface should be available to use for the
//UserService struct like : UserService.ByID or UserService.ByEmail.
//Yes, you dont even need to have UserDB in the function call above unless
//you have over-ridden those methods with reciever methods of the same name
//for UserService
type userService struct {
	UserDB
}

//userValFn : is a fuction type. Any function that fits this pattern
//of accepting user and returning error fits this functon type.
//An advantage of declaring function types is we can write function to
//runa  bunch of these successively. Notice the function below.
type userValFn func(*User) error

//This function accepts one or several functions of type userValFn as
//varacdic parameters. Then it runs it on the user. If any functions returns
//a non null value, then it returns a non null error. This can be used to run
//several validation functions together one after the other on the user object
func runUserValFns(user *User, fns ...userValFn) error {
	for _, fn := range fns {
		if err := fn(user); err != nil {
			return err
		}
	}
	return nil
}

//NewUserService : Instantiates a new user service.
// NOTICE THAT THIS DOES NOT RETURN A POINTER, it returns an interface
//Interfaces can be nil,
// so we don't need to return a pointer here. Don't forget
// to update this first line - we removed the * character
func NewUserService(connectionstring string) (UserService, error) {
	ug, err := newUserGorm(connectionstring)
	if err != nil {
		return nil, err
	}
	userValidator := &userValidator{UserDB: ug, hmac: hash.NewHMAC(secretkey)}
	//userValidator implements the UserDB interface for userService

	userService := &userService{UserDB: userValidator}
	return userService, nil
}

//newUserGorm : Creates a UserService instane with an open connection
func newUserGorm(connectionstring string) (*userGorm, error) {
	db, err := gorm.Open("postgres", connectionstring)
	if err != nil {
		return nil, err
	}

	db.LogMode(true)
	return &userGorm{
		db: db,
	}, nil

}

//Close : Closes the connection to the gorm database
func (u *userGorm) Close() {
	u.db.Close()
}

//ByID has no validation code, so we won't be implementing this for the
//userValidator
func (u *userGorm) ByID(id int) (*User, error) {
	var user User
	err := u.db.Where("id = ?", id).First(&user).Error
	switch err {
	case nil:
		return &user, nil
	case gorm.ErrRecordNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

//ByEmail has no validation code, so we won't be implementing this for the
//userValidator
func (u *userGorm) ByEmail(email string) (*User, error) {
	var user User
	err := u.db.Where("email = ?", email).First(&user).Error
	switch err {
	case nil:
		return &user, nil
	case gorm.ErrRecordNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (uv *userValidator) ByRemember(token string) (*User, error) {
	//query the hmac method in the userGorm. You accept a plain text
	//remember token and find the user that matches the token.

	var user User
	user.Remember = token
	//check validity using the validator functions.
	if err := runUserValFns(&user, uv.bcryptPassword, uv.rememberHash); err != nil {
		return nil, err
	}
	return uv.UserDB.ByRemember(user.RememberHash)
}

func (uv *userValidator) ByRememberHash(hash string) (*User, error) {
	return uv.UserDB.ByRememberHash(hash)
}

func (u *userGorm) ByRemember(hash string) (*User, error) {
	var user User
	err := u.db.Where("remember_hash = ?", hash).First(&user).Error
	if err != nil {
		return nil, err
	}
	return &user, nil
}

func (u *userGorm) ByRememberHash(hash string) (*User, error) {
	var user User
	err := u.db.Where("remember_hash = ?", hash).First(&user).Error
	if err != nil {
		return nil, err
	}
	return &user, nil
}

//AutoMigrate : Auto-Migrates the user table and makes new column additions
// and updates
func (u *userGorm) AutoMigrate() error {
	err := u.db.AutoMigrate(&User{}).Error
	if err != nil {
		return err
	}
	return nil
}

//DestructiveReset : Completely Delete all data and start again
func (u *userGorm) DestructiveReset() error {
	if err := u.db.DropTableIfExists(&User{}).Error; err != nil {
		return err
	}
	err := u.AutoMigrate()
	if err != nil {
		return err
	}
	return nil
}

//brcyptPassword : A validator function that can be called to add
// a salt and pepper to a password and then create a remember hash
// and returns a user. This implements the function type UserValFn
//which has been defined above
func (uv *userValidator) bcryptPassword(user *User) error {
	//add pepper to user password and return hashed bytes
	if user.Password != "" {
		hashedBytes, err := bcrypt.GenerateFromPassword(
			[]byte(user.Password+userPwPepper),
			bcrypt.DefaultCost)
		if err != nil {
			return err
		}
		user.PasswordHash = string(hashedBytes)
		user.Password = ""
	}
	return nil
}

//A validaotr function that can be used to hash remember tokens.
//This function implements the UserValFn function type declared above
func (uv *userValidator) rememberHash(user *User) error {
	if user.Remember == "" {
		return nil
	}
	user.RememberHash = uv.hmac.Hash(user.Remember)
	return nil
}

//A validator function that sets a remember token if the remember token is empty
//This also implements the UserValFns function type.
func (uv *userValidator) setRememberIfUnset(user *User) error {
	if user.Remember == "" {
		token, err := rand.String(32)
		if err != nil {
			return err
		}
		user.Remember = token
		user.RememberHash = uv.hmac.Hash(user.Remember)
	}
	return nil
}

//Validator code for the Create function that then calls the userGorm create
func (uv *userValidator) Create(user *User) error {
	//generate a remember token first if the remember token is empty
	if user.Remember == "" {
		user.Remember, _ = rand.String(32)
	}

	if err := runUserValFns(user, uv.bcryptPassword,
		uv.setRememberIfUnset,
		uv.rememberHash); err != nil {
		return err
	}
	return uv.UserDB.Create(user)
}

func (u *userGorm) Create(user *User) error {
	err := u.db.Create(user).Error
	if err != nil {
		return err
	}
	return nil
}

//Update : Validaor interface implementation of Update.
//Checks if the remember token is empty, if so creates a token
//then calls the userGorm implementation of Update
func (uv *userValidator) Update(user *User) error {
	if err := runUserValFns(user, uv.bcryptPassword,
		uv.setRememberIfUnset,
		uv.rememberHash); err != nil {
		return err
	}
	return uv.UserDB.Update(user)
}

//Update : Updates a given user. Updates all the fiels of the user
//depending on the struct you provide.
func (u *userGorm) Update(user *User) error {

	err := u.db.Save(user).Error
	if err != nil {
		return err
	}
	return nil
}

//DeleteUser : the delete user in gorm works in two ways.
// The first way is that you get an id and you delte the id.
//In the second method, you delete the ID =0 to delete all users.
//We can never let the second case happen. So we should write code to avoid that.
func (uv *userValidator) Delete(id uint) error {
	if id == 0 {
		return ErrInvalidID
	}
	return uv.UserDB.Delete(id)
}

func (u *userGorm) Delete(id uint) error {
	user := User{Model: gorm.Model{ID: id}}
	err := u.db.Delete(&user).Error
	if err != nil {
		return err
	}
	return nil
}

//Authenticate : Still Implemented by the UserService
func (u *userService) Authenticate(email string, password string) (*User, error) {
	//You can call methods of the interface implementation directly
	//because no reciever function on the UserService struct has overwritten the
	//UserDB implementation of ByEmail
	foundUser, err := u.ByEmail(email)
	if err != nil {
		return nil, ErrInvalidPassword
	}
	err = bcrypt.CompareHashAndPassword([]byte(foundUser.PasswordHash),
		[]byte(password+userPwPepper))
	switch err {
	case nil:
		return foundUser, nil
	default:
		return nil, ErrInvalidPassword
	}
}
